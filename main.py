import pygame
from pygame.constants import MOUSEBUTTONDOWN

from Algorithms.list_generator import list_generator
from Algorithms.bubble_sort import bubble_sort
from Algorithms.insertion_sort import insertion_sort



class AlgorithmsVisualization:

    def __init__(self) -> None:
        '''game initialization and resources creation'''
        pygame.init()
        self.screen = pygame.display.set_mode((0,0),pygame.FULLSCREEN)
        pygame.display.set_caption("Sorting Algorithms")
        self.screen_width = self.screen.get_rect().width
        self.screen_height = self.screen.get_rect().height

        self.bg_color = (255,255,255)
        self.button_color = (0,0,255)
        self.text_color = (0,0,0)
        self.colums_color = (0,255,0)

        self.running = True

    def run_program(self):
        """ main game loop initialization (opens main manu)"""
        x = self.screen_width / 2
        y = self.screen_height
        while self.running:
            (mx, my) = pygame.mouse.get_pos()
            self.screen.fill(self.bg_color)
            self._draw_text('CHOOSE ALGORITHM', 60, self.text_color, x, y*0.2)
            button_bubble = pygame.Rect((0.8*x, y*0.3), (0.4*x, 0.1*y))
            button_insertion = pygame.Rect((0.8*x, y*0.5), (0.4*x, 0.1*y))
            button_exit = pygame.Rect((0.1*x, y*0.8), (0.4*x, 0.1*y))
            self._draw_button(button_bubble, self.button_color, 'BUBBLE SORT', 40, self.text_color)
            self._draw_button(button_insertion, self.button_color, 'INSERTION SORT', 40, self.text_color)
            self._draw_button(button_exit, self.button_color, 'EXIT', 40, self.text_color)

            if button_bubble.collidepoint((mx, my)):
                if self.click:
                    self.game_running = True
                    self._create_colums('bubble')
            
            if button_insertion.collidepoint((mx, my)):
                if self.click:
                    self.game_running = True
                    self._create_colums('insertion')

            if button_exit.collidepoint((mx, my)):
                if self.click:
                    self.running = False

            self._check_events()

            pygame.display.update()
        
        pygame.display.quit()
        pygame.quit()
        exit()


    
    def _check_events(self):
        '''reaction to events generated by the keyboard and mouse inside menu'''
        self.click = False
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.running = False
            elif event.type == MOUSEBUTTONDOWN:
                if event.button:
                    self.click = True

    def _draw_text(self, text, font_size, color, x, y):
        '''draws given text in the given position'''
        font = pygame.font.SysFont(None, font_size)
        gen_text = font.render(text, 1, color)
        rect = gen_text.get_rect()
        rect.center = (x, y)
        self.screen.blit(gen_text, rect)

    def _draw_button(self, button, color, text, font_size, text_color):
        '''draws square with given text in the position of given button'''
        pygame.draw.rect(self.screen, color, button)
        (x, y) = button.center
        self._draw_text(text, font_size, text_color, x, y)

    def _draw_button_circuit(self, button, color):
        '''draws circuit of given button'''
        pygame.draw.rect(self.screen, color, button, 2, 8)

if __name__ == '__main__':
    visual = AlgorithmsVisualization()
    visual.run_program()